/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-12-19 06:29:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class listing_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("\thref=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n");
      out.write("\tintegrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n");
      out.write("\tcrossorigin=\"anonymous\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/user.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/common.css\">\n");
      out.write("<title>ワークショップEC</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div class=\"nav\">\n");
      out.write("\t\t<nav class=\"navbar navbar-expand bg-white\">\n");
      out.write("\t\t<div class=\"navbar-brand ml-2\">\n");
      out.write("\t\t\t<h2>WorkShop</h2>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"row ml-2 my-auto\">\n");
      out.write("\t\t\t<ul class=\"navbar-nav mr-auto align-items-center\">\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 font-weight-bold\">ITEMS</li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 font-weight-bold\">FEATURE</li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 font-weight-bold\">COORDINATE</li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 font-weight-bold\">SHOP</li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 font-weight-bold\">CONTENT</li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2 ml-3\"><img src=\"img/icon/hart.png\"\n");
      out.write("\t\t\t\t\talt=\"\"></li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2\"><a href=\"login.jsp\"><img\n");
      out.write("\t\t\t\t\t\tsrc=\"img/icon/man.png\" alt=\"\"></a></li>\n");
      out.write("\t\t\t\t<li class=\"nav-item p-2\"><img src=\"img/icon/cart.png\" alt=\"\"></li>\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t\t<form class=\"form-inline my-1 my-lg-0 px-2\">\n");
      out.write("\t\t\t\t<input class=\"form-control mr-sm-1\" type=\"search\"\n");
      out.write("\t\t\t\t\tplaceholder=\"Search\"> <img src=\"img/icon/search.png\" alt=\"\"\n");
      out.write("\t\t\t\t\ttype=\"submit\">\n");
      out.write("\t\t\t</form>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t</nav>\n");
      out.write("\t</div>\n");
      out.write("\t<main>\n");
      out.write("\t\t<article>\n");
      out.write("\t\t\t<form action=\"#\" method=\"POST\" class=\"item_listing\">\n");
      out.write("\t\t\t\t<p class=\"item_name\">商品名</p>\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"item\" id=\"item_name\">\n");
      out.write("\t\t\t\t<p class=\"price\">値段</p>\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"price\" id=\"price\">\n");
      out.write("\t\t\t\t<div class=\"image_box\">\n");
      out.write("\t\t\t\t\t<p class=\"item_image\">商品画像</p>\n");
      out.write("\t\t\t\t\t<p>(*画像のリンクを添付してください)</p>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<input type=\"file\" name=\"fileup\" value=\"1\">選択されていません\n");
      out.write("\t\t\t\t<p class=\"item_category\">カテゴリ</p>\n");
      out.write("\t\t\t\t<select name=\"item_category\">\n");
      out.write("\t\t\t\t\t<option value=\"1\">机</option>\n");
      out.write("\t\t\t\t\t<option value=\"2\">椅子</option>\n");
      out.write("\t\t\t\t\t<option value=\"3\">棚</option>\n");
      out.write("\t\t\t\t\t<option value=\"9\">その他</option> \n");
      out.write("\t\t\t\t</select>\n");
      out.write("\t\t\t\t<input type=\"submit\" value=\"登録する\" class=\"listing_btn\">\n");
      out.write("\t\t\t</form>\n");
      out.write("\t\t</article>\n");
      out.write("\t</main>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
