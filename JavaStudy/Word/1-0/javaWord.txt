■ 開発
ウォーターフォール開発
  工程を「企画」「設計」「実装」「テスト」に分割した上で開発を進める
  最初の企画の段階で、開発対象のソフトウェアの機能を全て決めてしまう
  開発の計画や予算の見積りが容易になる

アジャイル開発
  1週間から1か月といった短期の反復期間内で、どんどん機能を追加していく「反復増加タイプ」の開発プロセス
  開発期間が大幅に短縮される
  開発中で仕様の変更や新しい機能が追加される可能性の高いプロジェクトに向いています

アジャイルとウォーターフォールの比較
  クライアントの要求の対応、アジャはその都度できる、ウォーターは開発前に確立しないといけない
  アジャは頻繁にテスト作業が必要、ウォーターはテスト工程のみで行う

マイグレーション
  既存のシステムやソフトウェアなどを新しいプラットフォームやシステムに移行すること
  ４種類ある
    ・アプリケーション移行：顧客管理システムや企業資源企業資源計画などのアプリケーションベンダーを乗り換える
    ・データ移行：古くなった媒体から新しい媒体にデータを移行。データマイグレーション
    ・データベースの移行：DBに保存されているデータを保持したまま、テーブルの作成やカラムの変更、インデックスの作成など
    ・ビジネスプロセスの移行：ビジネスの最適化や組織変更、新市場への参入などの、組織や顧客・製品・オペレーションに関する情報の変化が生じる場合、BPMのマイグレーションを行う

デグレーション
  プログラムのアップデートにより、どこか他の場所でバグ（ミス）が発生し、実は品質が落ちていましたというもの
  今までは正常に使えていた機能を、念のため再度テストすることをリグレッション。

デプロイ
  開発したアプリケーション（機能やサービス）をサーバー上に展開・配置して利用できるようにすること

コンフリクト
  データベースシステムやファイルシステム、バージョン管理システムなどで、同じ対象や領域（レコードやファイルなど）に同時に複数の更新要求が発生し、
  内容が損なわれたり要求が拒絶されるなど正常に処理できない状態

-環境-
  機器やソフトウェア、システムを開発するために必要な機材やソフトウェアなどの組み合わせ。

開発環境（ローカル）
  個人のコンピューター内に構築された環境のこと

検証環境（ステージング）
  検証環境：開発し終わった、リリース予定の機能をテストするための環境
  ステージング：本番環境に似せた条件で、システムの動作確認をする工程。最終確認の意味合いが強い。

本番環境
  ユーザーが実際にシステムを使う環境のこと
  本番環境でテストは行わない

-設計書／仕様書-
  プログラムを完成させるために実装の指示をする

要件定義
  客の要求定義をいかにシステム化していくかを定義する、いわばシステム開発の土台
  プロジェクトを成功させるために要求の細部まで、あるいは運用・保守に至るまでをミスなく決定しなければならない

基本設計書  
  要件定義にもとづいてソフトウェアの動きを外から見た際にどういう動きをするのか？(What)を決めたもの
  情報システムとしての大枠、全体像、アウトラインとも言えるものを決める段階

詳細設計書
  基本設計で決められた動きをどうやって実現するか？(How)を決めたもの

-テスト-
単体テスト（UT）
  各ユニットが正しく機能していることを検証する
  製造プロセスの初期段階で欠陥を検出する
  あらかじめどういう条件でプログラムが書かれているのかがわかっていて、その条件を通るようにテストを作成する

結合テスト（CT／IT）
  詳細設計、基本設計どうりに作れているかを確かめるテスト
  設計書をみながら条件を書き出して、それを満たすインプットから期待通りのアウトプットになるかを確かめる

総合テスト（ST）
  システムテスト
  構築したシステムが全体で予定通りの機能を満たしているか、また機能や性能が仕様書通りに構築できているかを検証すること

エビデンス／証跡
  システムが設計通りに動作していることを示す証拠となるログやデータファイル、画面キャプチャなどの作業証跡
  システムやプログラムが想定した通りの動きをしていることを証明する重要なデータであり、また、実施したテストの正当性を示す資料にもなる

データパッチ
  母体となるプログラムに追加することで、プログラムを変更、機能追加させることができるデータのこと
  後付けのプログラム

Access
  関係データベース管理システムソフト
  データベースの開発および構築はもちろんのこと、データの分析や加工、データベースアプリ作成など、データベース管理に関わる便利な機能が多数搭載されているのが特色

-マクロ
VBA
  Office製品をより効率的に活用するために提供されているプログラミング言語
  Office製品を使ってルーティン化している作業を自動化したり、Office製品を利用したシステム開発にも用いられます。 

GAS（Google Apps Script）
  googleが開発・提供しているJavaScriptをベースに作成されたプログラム言語
  googleのサービスと連携し、ツールの機能拡張が可能

-API
  「何か」と「何か」が「アプリケーション、ソフトウェア」と「プラグラム」をつなぐもの
  APIはソフトウェア同士を繋げる

WEB API
  Web上でAPIのやり取りを可能にしたもの。
  異なるプログラミング言語で開発されたアプリケーション間を連携させることが可能

REST API
  ・HTTPのメソッド（命令）でデータ操作種別（CRUD）を表す
  ・ステートレスにする
  ・URIで操作対象のリソースを判別可能にする
  ・レスポンスとしてXMLもしくはJSONで操作結果を戻す
  上記の考え方に従って実装されたAPI
  
SOAP
  XMLを利用したWebサービス連携プロトコル
  XMLで記述された「SOAPメッセージ」と呼ばれるデータをやりとりすることで、メッセージを交換する

-Ajax
  JavaScriptでサーバー側との通信を「非同期」で行い、通信結果によって「動的にページの一部だけ書き換える」手法のこと
  クライアントとサーバー間の通信を非同期に行える

XML
  文章の見た目や構造を記述するためのマークアップ言語の一種
  データの管理ややりとりを簡易にするために、広く用いられているマークアップ言語
  データの意味に合わせて要素名を自由に定義し、データを明確に目立たせることができる
  アプリケーション間のデータ交換手段としても用いられる

JSON
  JavaScriptのオブジェクト記法を用いたデータ交換フォーマット
  JavaScriptのオブジェクトの書き方を元にしたデータ定義方法

ステータスコード
  Webサーバーからのレスポンスの結果を表す、3桁の数字コードのこと
  100番台のステータスコードは情報不足、200番台は正常、300番台は追加処理が必要、
  400番台はWebブラウザからのリクエストに誤り、500番台はサーバーがリクエストの処理に失敗した状態を意味する

クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
  「同一生成元ポリシー (Same-Origin Policy)」(JavaScript で自由にやりとりできるところは、その JavaScript をとってきたところと同一の場所だけに制限する)
  というポリシーによって設けられた制限を緩めるもの
  あるオリジンで動いている Web アプリケーションに対して、別のオリジンのサーバーへのアクセスをオリジン間 HTTP リクエストによって許可できる仕組み

バリデーション
  入力されたデータが、あるいはプログラミング言語やマークアップ言語の記述が、規定された文法に即して、または要求された仕様にそって、適切に記述されているかどうかを検証すること

-データ連携-
  異なるアプリケーションやシステムをまたいでデータを共有、活用するために、それぞれの言葉や解釈の垣根を取り払うプロセス

Daemon
  UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。

CRON
  Linuxサーバーの管理で、大切な設定方法の一つ.
  「何を」「いつ（頻度）」実行するかを決めて、そのルールを書き込む
  ・指定したプログラムの動作を予約できる
  ・実行する頻度を細かく調整できるので、自動的に繰り返すことができる
  ・以上によりサーバー管理者の負担とミスは減り、より効率良くサーバーの管理業務ができる

バッチ
  一定量の(あるいは一定期間の)データを集め、一括処理するための処理方法
  複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する

ログ
  コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録を指す

CSV
  CSVファイルは互換性が高く、Excelのみならずメモ帳、メールソフト、データベースソフトなどほとんどのソフトに取り込んで閲覧、編集することが可能

TSV
  タブを区切り文字として使うテキストデータ
  文字や文字列の間にタブ記号を挿入して区切りを設けること、あるいは、そのようにして各データを区切って管理するファイル形式のことで

プルリクエスト（マージリクエスト）
  開発者のローカルリポジトリでの変更を他の開発者に通知する機能


■ チケット管理ツール
  タスク管理ツール
  プロジェクト毎に発生する各種タスクを発行して、制作者に対して仕事を依頼するためのもの

asana
  タスク整理に特化したプロジェクト管理ツール
  Slack/Dropbox/Googlecalendarなどのさまざまなアプリケーションとの連携が可能

Backlog
  クラウド型のアプリケーションで、タスク管理機能に特化したプロジェクト管理ツール
  ガントチャートやマイルストーンが簡単に作れるため、Web作成などでは力を発揮する

Jooto
  タスク管理機能に特徴のあるクラウド型の管理ツール
  看板方式で見やすいという点や、ドラッグ＆ドロップ方式による直感的な操作が可能なため、視覚的にすぐに使いこなすことが出来る

Readmine
  世界的に非常に認知度の高いプロジェクト管理ツール
  ブラウザで登録することで、ガントチャートやロードマップが簡単に作れるうえに、管理者権限を利用したWikiの作成なども行えるため、新しく製品を作る場合などで力を発揮する

Trello
  タスクのカードを自由に動かしながら視覚的にプロジェクトを管理できる
  複数人の作業をリアルタイムで確認出来るため、リモートワークなどでも力を発揮する

■ バージョン管理
集中型
  ある1つのサーバで中央集中型システムは稼働し，だれでもそのサーバからファイルのコピーを取得して作業ができる．
  変更した内容はサーバにある内容に反映(コミット)できる
  オフラインの状態では最新のファイルをリポジトリに取得・反映することができない

分散型
  主となるサーバは持っていない代わりに，だれもが独立したリポジトリを用意して，他のリポジトリと同期することができる

Github
  ソフトウェア開発プロジェクトのためのソースコード管理サービス(分散型)

Backlog
  ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツール
  シンプルでわかりやすいUIや、コラボレーションに大きな比重をおいている
  用途は、大規模なソフトウェア開発から保守運用、デジタルマーケティングキャンペーンの管理、Webサイトの制作まで多岐にわたる。

SourceTree
  Gitを簡単に使えるようにしたツール
  全てコマンドで操作していくCUI形式ではなく、GUI形式でGitを使えるツール

Tortoise SVN
  Subversionのクライアントフロントエンド（各種入力をユーザーから受け取り、バックエンドが使える仕様に合うようにそれを加工する役目を担う）となるソフトウェア
  Windowsエクスプローラと直接統合されて動作し、エクスプローラ上からファイルとディレクトリの状態をひとめで確認できる

-Git Flow
master
  git flowではマージするためだけのブランチ
  プロダクトとしてリリースするためのブランチ。リリースしたらタグ付けする。

release
  製品をリリースするために使うブランチ
  リリースブランチでリリースするための作業を行う

develop
  開発の中心となるブランチ
  作業完了後に再びマージするという作業を繰り返す
  直接このブランチにコミットすることはない

feature
  機能の追加や変更、バグフィックスを行うブランチ
  ひとつの変更に対してひとつの feature ブランチを切ることになるため、開発中で最も使われるブランチになる

■ FW／ライブラリ
-FW【 firmware 】 
  コンピュータや電子機器などに内蔵されるソフトウェアの一種で、本体内部の回路や装置などの基本的な制御を司る機能を持ったもの

Spring Framework
  Javaの開発環境で使用できるオープンソースのフレームワークです
  AOPとDIと呼ばれる概念で構築されていること、
  専用のテストプログラムがあることが特徴としてあげられる
  *AOP(システム内で行われる同じ処理（共通処理）を抽出して集約をするプログラミング手法)
  *DI(1つひとつのプログラムを独立させやすくなり、システムの開発や改修が楽になる)

Struts
  ・Java Servlet, Java BeansなどJ2SE又はJ2EEで提供されている標準的なテクノロジーを採用している
  ・MVCモデル2を採用している
  ・ビューの部分は、JSP, Jakarta Velocity, XSLTなど様々なものの中から1つ選択できる
  といった特徴がある

JSF（Java Server Faces）
  オブジェクト指向プログラミング言語JavaのWebアプリケーションを作るためのフレームワーク
  ユーザーに文字入力や回答を選択するボックスなどのユーザーインターフェースを作ることに特化
  とにかく扱いが簡単

-ライブラリ
  よく使う複数のプログラムを再利用できるようにひとまとまりにしたもの

Bootstrap
  Web制作者の作業を楽にする目的で作られた、Webサイト構築用のCSSひな形セット
  「CSSフレームワーク」や「CSSライブラリ」と呼ばれる事もある

Flyway
  オープンソースのデータベースマイグレーションツール
  Flyway を使うことで、データベースの状態をバージョン管理できるようになる

Jackson
  JSON（※）形式のデータを処理するための高速かつ軽量なJavaライブラリ
  ・ストーミングAPI（JSONデータを先頭から順に読み込みながら処理するため、メモリと処理のオーバーヘッドを少なくできる最も効率的な方法ですが）
  ・ツリーモデル(JSONドキュメントの変更可能なメモリ内ツリー表現を提供)
  ・データバインディング(アノテーションなどに基づいて、JSONオブジェクトとJavaオブジェクトをバインディングする)

jQuery
  JavaScriptでできることを、より簡単な記法で実現できように設計されたJavaScriptライブラリ
  ・ブラウザの違いを意識せずに済む
  ・HTMLのDOM操作が簡単にできる
  ・Ajax処理が簡単に記述できる
  の特徴がある

Junit
  Javaで書かれたプログラムのテストを自動化するためのツール
  Javaによるソフトウエア開発の流れの中でプログラムをテストする工程で使われる。テストデータの入力とテスト結果の確認を自動的に行う。

Log4j
  Jakarta プロジェクトで開発が進められている Java プログラム用のログ API 
  Log4J を利用することで、様々なロギングが可能
  パフォーマンスにも十分に配慮されて設計されているので、ログの記録に用いるコードをプログラムソースに残したまま出荷しても、特に問題は起こらない

Lombok
  Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ
  Eclipseの自動生成機能の代わりにアノテーションを使うことで冗長なコードを簡潔にする

ORM
  オブジェクト関係マッピング (ORM: Object-relational mapping)
  ここで言う「関係」とは、別にモノ同士のつながりとかではなく、単純に「リレーショナルデータベース」のことを指している
  ・データベースからデータを取得する
  ・取得したデータをオブジェクト化する
  ・データの更新・変更などをデータベースに格納する
  の機能のまとまり

■ 連絡ツール
ChatWork
  ビジネスコミュニケーションに特化したチャットツール
  タスク管理機能が強み

Slack
  SaaS型のビジネスチャットツール

IP Messenger
  LAN 用メッセンジャーソフト
  同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる優れたソフトウェア

■ Java
Javadoc
  Javaでは、「Javadoc」と言われるコメントを記述できます。これは、プログラムについて説明するドキュメントをソースコードに埋め込むためのもの
  「ドキュメントを作るのが面倒なので，プログラム中に特定のルールに従って付けたコメントを抽出してドキュメントを作っちゃう」考え方に沿って，
  Java言語のソースコードからドキュメントを生成する仕組み

アノテーション
  「注釈」を意味する言葉で、Javaを書くときに大切な情報をコメントできるもの
  Javaのコード上では”@(アットマーク)”からはじまり、コードでは表現しきれない情報を、補足としてつけ加えられる

-メモリ管理
ヒープ
  ヒープとは、データ構造の一種で、木構造（ツリー構造）のうち、親要素が子要素より常に大きい（あるいは小さい）という条件を満たすもの
  コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や解放が可能なものをヒープ領域というが、これをヒープと略す場合がある
  「あるプログラムが使用できるメモリ領域」のことを「ヒープ領域」

GC(ガベージコレクション)
  プログラムにおける掃除のおばちゃんのような存在
  「プログラムが確保したメモリ領域のうち、不要になった箇所だけを解放してくれる」機能
  Scavenge GC：「テーブルの上やフロアだけをサッと掃除する」ような状態
  Full GC：部屋全体を掃除

GoF
  オブジェクト指向プログラミングにおける再利用性の高いコーディングのパターン、デザインパターンをまとめた4人のプログラマのこと

デザインパターン
  JavaやRubyなどのオブジェクト指向の言語で使われる設計パターン
  過去のエンジニアが解決してきた方法（設計）が、デザインパターンとしてまとめられている

■ その他
オブジェクト指向
  プログラムを手順ではなくて、モノの作成と操作として見る考え方
  プログラムの雛形を作り、何度も使いまわせるようにしたもの
  
バッチ処理
  決められたタイミングで処理を一括して行うこと

コンパイル
  コンパイルとは、プログラム言語をコンピュータが理解できる言語に変換すること
  翻訳ソフトウェアをコンパイラ

カバレッジ
  モノや範囲に対して全体の内どれくらいをカバーいているかを表すための指標
  完成したソフトウェア・プログラムをテストする際に、全体の仕様に対して実際にテストが行えている範囲をテストカバレッジ

プラットホーム
  特定のアプリケーションから見て、そのアプリケーションが動作するのに必要な環境の事
  ITの世界の場合、プラットフォームの大元の土台はOSと言われる場合が多い
