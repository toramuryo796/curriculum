■ IT(Internet Technology)
IT★
 =>「情報技術」のことで、コンピューターやデータ通信に関する技術の総称。

ICT★
 =>「情報通信技術」のことで、「IT」に比べ個人からの発進情報の強調するニュアンスが強い。

IoT
 =>"Internet of Things"の略。インターネット経由でセンサーと通信機能を持ったあらゆるモノの情報を伝達する。

OS★
 =>Operation Systemの略。アプリやデバイスを操作する為に基本となるソフトウェア。
 デバイスからの情報をアプリケーションに伝え、ハードウェアとソフトウェアの連携を司る中枢的な役割。

Windows
 =>マイクロソフトが開発し、現在最も有名なOS

macOS (Mac OS X)
 =>アップルが開発し、GUIを採用した元祖のOSと言われている。

UNIX★
 =>AT&T社が開発したOS。インターネットを利用する上で大きく貢献。macOSもUNIX
 軽くて機能も少なくて使い易いOS。

Linux★
 =>安定的に動き、費用がかからないのが特徴。Androidに使用されている。
 LinuxはUnixを参考にして作られている。

Unix, Linuxの違い★ 
 UNIX,Linuxは共に安定性が高く、マイナーなイメージ、費用面での優遇が特徴である。
 Unixは企業が開発して、知的財産権が企業に属している(Unixという名を使用しなければ無料で使用できる)のに対して、
 Linuxはオープンソースで無料かつ改変や配布も自由


■ 言語・環境
マークアップ／フロントエンド★
 =>プログラミング言語のうち、「文書を構造化する」役目を持っている。また、その文書の見た目を記述する為に使用される。

HTML★
 =>Hyper Text Markup Language（ハイパーテキスト・マークアップ・ランゲージ）の略。
 異なるプラットフォーム間で文字以外の書式や設定を定義できるマークアップ言語

CSS
 =>HTMLで作成した文書のデザインを変更するための言語。

JavaScript
 =>ブラウザ上でWebページをダイナミックに動かすプログラム。サーバを介さなくてもブラウザだけで動的な表現ができる。

サーバーサイド★
 =>データやサービスなどを管理しているサーバ上で動くモノ。java,PHP,Rubyなどが該当する。

.NET（C#, VB）
 =>一般的に.NET Frameworkと呼ばれるアプリケーション,または開発環境を指す言葉として使われる。
 windowsとの相性が良く、windows系のシステム開発で用いいられる。

Java
 =>OSに依存せず、安定して動作するプラットフォームを提供しており、世界で人気が高い言語。
 処理速度が速い、OSに依存しない、オブジェクト指向などのメリットがあるが、学習コストの高さや環境を整えるのが大変。

Java SE
 =>Java Platform, Standard Edition の略。Javaで使用される基本的なAPI(機能やデータなどを利用するための呼び出し方を定義したモノ)をまとめたモノ。

Java EE（Jakarta EE）
 =>Java Platform, Enterprise Edition の略。大規模な開発を行う場合に使用される。
   Java SEの拡張機能という位置付けになるため、使用する際はJava SEと合わせて使用する。

Perl
 =>後方互換性が高く、バージョンがアップデートされても古いバージョンのコードを扱える。
 テキスト処理が得意なスクリプト言語で数行でデータの保存や、キーワードの検索を実現できる。
 Perlの応用範囲は広く、システムユーティリティやソフトウェアツールの作成、データベースへのアクセス、グラフィックやネットワーク処理、
 そしてウェブプログラミングなどに適している。

PHP
 =>サーバーサイドでコードを実行するスクリプト言語。
 HTMLソースコードを生成する、データベースと連携する、クライアントから送信された情報を受け取るなどができる。
 webアプリケーションに特化した言語

Ruby
 =>オブジェクト指向スクリプト言語。ruby on rails というフレームワークを使用することができ、webサイトや業務システムを効率よく開発できると言われている。
 少人数の短期開発に向いている。


■ サーバーソフト
webサーバー★
 =>サーバーを司るソフトウェア。
 webサイトを利用している人のブラウザにwebサイトの情報を送信して、テキストや画像を表示させることを可能にする役割がある。

Apache★
 =>ICTの基盤を支えるWebサーバソフトウェア。OSS(オープンソースソフトウェア)で無償で利用可能。モジュールにより基本機能を拡張可能。
 高いパフォーマンスの発揮、高水準な信頼性から人気の高いwebソフトサーバー。
 負荷が低く、早期または簡易的なセットアップが必要な場合、同時アクセス数が小さく、単純にリクエスト数が多いような場合に選択される。

nginx★
 =>Webサーバ用のソフトウェアでApacheに次いで人気がある。高速かつ大量処理が得意。
 大量の動的コンテンツには不向き
 負荷が高く、スケーラビリティが要求されるような場合、静的ページに同時多数のアクセスが想定されるような場合に選択される。

Apacheとnginxの違い
 =>Apacheは１アクセスに対して１つの対応をする(アクセス急増時に負荷増)のに対し、
 nginxは複数のアクセスに対し、1つの対応にまとめる(アクセスに負荷は比例)。


IIS★
 =>Internet Information Servicesの略。無料で利用できるサーバソフト。Microsoftが提供するWebサーバーサービス。
 特徴 ASP（.NET Framework）を使った動的サイト, Microsoft製品との親和性, 視覚的な操作性の高さが特徴。
 windows OSで動き、視覚的に操作可能, 信頼性が高く、大規模なサイトに利用される。

■ SQL
SQL★
 =>「シークェル」と呼ばれる。データベース言語の一つでデータベースの操作や定義ができる。
 ISOで規格化されているため、一つのデータベース用のSQLを学習すれば、ほとんどのRDBで利用できる。

DB2
 =>IBM社のリレーショナルデータベース管理システム
 個々のデータベースごとに設定を指定でき、より独立したデータベース環境を柔軟に構築することが可能.
 Db2のオプティマイザは最初からコスト・ベースだった(オプティマイザ：速くて楽になるように最適化を図るための機能)

MySQL★
 =>世界中の多くの企業で使用されているデータベース管理システム。
 大容量のデータを高速に動作できるため、レンタルサーバーや検索エンジンに使用される。

Maria DB
 =>MySQLから派生したRDBMS（リレーショナルデータベース管理システム）。
 完全なGPLライセンスで提供され、オープンソースプロジェクトとして、ベンダーなどからの干渉・関与なしに開発が進んでいる。
 MySQLと高い互換性を持っていることが大きな特徴であり、移行が非常に簡単。
 ＊GPLライセンスとは、「自己責任、著作権の表示、改変・再配布の自由、再配布もGPLライセンスを使用」のライセンス

Oracle DB
 =>oracle DBが製造・販売しているRDBMS。
 高い堅牢性、行レベルでの排他的制御(行レベル・ロック)により同時に多ユーザーが利用可能、検索時点のデータを読み取れる「読み取り一貫性」、機能拡張の柔軟性の高さが特徴。 

PostgreSQL★
 =>オープンソースのリレーショナルデータベース管理システム（RDBMS）。
 オープンソースのライセンスの中でも非常に緩やかなライセンス(BSDライセンス)を採用しているため、独自に機能の改変や追加を行っても公開義務はない。
 小規模開発や勉強目的で使用されることが多い。

SQLite
 =>オープンソースで軽量のRDBMS。サーバーとしてではなく、アプリケーションに埋め込んで使用する。
 設定ファイルを用意して起動・停止、データベースインスタンスの設定が不要で「自己完結型システム」と呼ばれている。
 データ型の指定が緩く、データ型の指定をせずともテーブルの作成が可能。

SQL Server
 =>Microsoft社が開発したRDBMS。Windows OSとの相性がよく、Windows Serverで利用されることが多い。
 視覚的に操作する「GUI」が利用でき、直感的にデータベースを操作できる。
 独自拡張の「Transact-SQL」が利用でき、より高度なデータベース操作が可能。

CRUD★
 =>Create(登録), Read(参照), Update(更新), Delete(削除)の機能をまとめた表現。
 システムを開発する際に最低限作成する必要がある機能群。

トランザクション★
 =>複数の処理を１つにまとめたモノ。ただし、これらの「複数の処理」は分離不可。実行した結果は、失敗か成功かのみ。
 複数の処理のうち、１つでも処理失敗した場合、全体の処理が失敗となる。
 例：銀行のATMの振り込み等

コミット★
 =>「処理を確定する、変更を反映する」等の意味合い
 プログラミングの過程、開発段階で用いられる

ロールバック
 =>データベースのトランザクション処理において、処理した結果を取り消すこと。

排他制御（排他ロック）★
 =>データベースシステムなどで記憶領域への同時アクセスを制限するロック機構の一つで、他の実行主体によるアクセスを完全に禁止するもの。
 ファイルへの書き込みが行われている間は別のプログラムによる書き込みを禁止するという制御が行われる。

楽観ロック★
 =>更新対象のデータが、データの取得時点から更新されていないことを確認したうえで更新することでデータの整合性を保証する.

悲観ロック★
 =>更新対象のデータを取得時点から明示的にロックしてから更新する（＝他トランザクションによる更新を防ぐ）ことでデータの整合性を保証する

実行計画
 =>SQLを最短時間で実行するための方法を「計画」としてまとめたもの。最適なデータアクセス方法

チューニング
=>目的の処理結果を変更せず、その過程を最適化すること。
SQL文のパフォーマンスを、特定の測定可能かつ達成可能な目標に合うように向上させる反復プロセス。

パフォーマンス
=>システムなどの「性能」を意図する用語。

クエリ
=>データベースに対する処理要求

スロークエリ
=>データベースにおいて、時間のかかっているSQL(遅いSQL)のこと。
意図せずフルスキャンをしているケースが多く、データ件数が増えるにつれて急激に性能問題を引き起こす。

クエリログ
=>MySQL サーバが実行した全ての SQLクエリを出力するログ。
MySQL サーバに接続した時間、接続元ユーザ、実行したSQLを出力する。

IDE（統合開発環境）★
=>テキストエディタ、コンパイラ、デバッガを1つにまとめた開発環境。従来は必要なツールをバラバラに揃え、バラバラに使用していた。
ソフトウェアの開発で利用されるこれらのソフトウェアを、その他の支援ツール(開発者の負荷を軽減するためのソフトウェア)などとまとめてしまい、
一つの開発環境で統合・統一的に扱えるようにした開発環境。

Eclipse★
=>IDEの一つ。オープンソフトウェア（OSS）として公開され、開発業務を効率化させて生産性を高めてくれるツール。
標準でJavaの開発環境が含まれているため、Eclipseを導入すればすぐにJavaの開発が行える。

NetBeans
=>Java IDEの1つ。プロジェクト管理機能や入力支援機能を備えたオープンソースのIDE。

SpringToolSuite
=>Spring Bootでの開発に使用するIDE。
※Spring BootとはSpring Frameworkベースのアプリケーションを手軽に作成することができるフレームワークである。

DBツール
=>データベース管理タスクに使用できるツール、ユーティリティおよび補助ツールの総称。
1つのデータベース・ツールですべてのデータベース管理タスクを実行することはできないない。

A5:SQL Mk-2
=>データベース開発において生産性を向上させるべく開発されたSQL開発ツール。
SQLの実行・テーブルの編集・ストアドプロシージャの実行・ER図の作成などを行うことができる。

pgAdmin
=>PostgreSQLを使ってデータベースを構築する場合に、必要となる基本的なツール。
非常に多機能であり、コマンドラインベースでPostgreSQLに対して行う操作の殆どは、このツールを使って実行することが可能。
データベースの開発時だけでなく、運用管理やメンテナンスを行う場合においても、このツールは欠かせないものとなっている。

DBeaver
=>「DBeaver Corp」が開発したマルチプラットフォーム対応の SQL クライアントツール。
GUIクライアントとして便利な機能が豊富で仕事で使う場合に役に立つものが多くある。

MySQL Workbench
=>データベースの作成から開発まで一元管理できるツール。
ER図を活用したデータベース設計、SQLの実行、MySQLデータベースの管理が可能。

Sequel Pro
=>Mac用のMySQLのデータをGUI操作で管理するためのアプリケーション。
GUI操作で簡単に使えることやSSL Tunnelが使える。
GUIで簡単に操作可能、ファイルのインポート・エクスポートが簡単、クエリの結果がコピペ可能というメリットがある。

TeamSQL
=>DBをGUIで管理する為のソフトウェアの一つ。
対応しているDBの種類が多い、SQLの実行履歴が残る、拡張機能がインストール可能、自由にチームを作成可能などの特徴がある。

■ 肩書
PM
=>プロジェクトマネージャーの略。プロジェクトを統括し、マネジメントする人。
顧客との折衝を通じて人員、予算、納期などを決める。

PL★
=>プロジェクトリーダーの略。PMの補佐のような役目。
システム仕様についてもしっかりと理解しながら、メンバーの管理もしていかなければいけない。

PG（PE）
=>プログラマーの略。SEが用意した仕様書をもとにプログラミング・単体テストをする。

SE
=>システムエンジニアの略。PMが作成した工程表に沿って、自分の担当業務をこなしていく。
担当のお客様と打ち合わせしていく中で、要件の確定や仕様の検討など、主に上流工程の業務。

デザイナー
=>様々なもののデザインを手掛ける。
「クライアントや依頼者の求めに応じたデザインを考案する仕事」である。

エンジニア
=>専門的な技術や能力、知識を駆使してシステム構築から製品製造までを行い、ものを作っていく。
さまざまな種類があり、それぞれ身につけるべき技術や知識が異なる。

フロントエンド・エンジニア★
=>ユーザーと直接データのやり取りを行うフロント側、Web制作ではWebブラウザ側（クライアント側）の業務を担当するエンジニア。

サーバーサイド・エンジニア★
=>サーバー側でプログラムを実行したり、データの管理などを行う部分の開発・運用をする。
技術者基幹系企業に使われることが多い。

バックエンド・エンジニア★
=>フロントエンド側からデータや指示を受け付け処理を行う部分の開発・運用をする技術者。
Web系企業に使われることが多く、フロントエンドに対して使われる。

■ UI（ユーザーインターフェース）
UI★
=>サイトのデザイン・文字のフォント・メディア（画像・動画）・サイト内検索機能など、ユーザーとの接点全て
ユーザーの満足度に影響を与えるものとして、特にWebサービス・アプリにおいてはその影響度が大きく、収益にも直結してくるため、注目されている。

CUI★
=>Character User Interfaceの略。テキストデータのみで表現されているUIのこと。
ターミナルを立ち上げる際に表示される黒い画面。キーボードを入力して何かしらのコマンドを入力して動作をコンピューターに指示する。

GUI(グラフィクユーザーインターフェース)★
=>画像やアイコンなどで表現されているUI。
表示されているボタンや、アイコンをマウスでクリックするだけで、あらかじめセットされたプログラムが作動する。
直感的に操作することができるもの。

■ ファイル／ディレクトリ
ファイル★
=>コンピュータにとって分かりやすい形でまとめたデータ。
画像や音声、動画などのデータをコンピュータで識別できるように仕分け仕分けする。

拡張子★
=>ファイル名の末尾「.」以降に付いている文字列のこと。コンピュータは拡張子を見て、ファイルの種類を判断している。

ディレクトリ
=>ファイルを整理・保管する袋。フォルダと同義。

ルート・ディレクトリ★
=>階層型ファイル構造における最上階層のディレクトリ（あるいはフォルダ）のこと。
すべてのファイルやディレクトリはルートディレクトリを根（root）とする木構造のディレクトリ階層のいずれかに収まっている。

カレント・ディレクトリ★
=>ユーザーが現時点で作業を行なっているディレクトリのこと。

パス
=>閲覧・送受信したいファイルやフォルダの指定方法を表す。
ネット上の情報やファイルがどこにあるのかをたどっていく。

絶対パス★
=>URLでページを指定して、目的地（情報）がどこにあるのかを確実に伝える、ファイルの位置を最初から最後まで完全に記述する方法。
”http://~”の記述があるためWebサーバーに繋がりローカル環境でテストができない、記述に時間がかかると言ったデメリットがあるが、
一度記述したコードを別のページに移動しても問題なく動くので、ページを増設する際に役に立つ。

相対パス★
=>編集しているファイルを置いている場所を起点にして、対象のファイルのURLを記述する方法。
自身のファイル位置を”./”で表し、そこから上や下のディレクトリにあるファイルへの道筋を示す記述方法。
相対パスを記述する際は以下の3つのようにします。      
・同じ階層内にあるファイル →ファイル名で記述
・同じ階層内にある、別フォルダの中にあるファイル → フォルダ名/ファイル名で記述
・今いる階層の1つ上の階層にあるファイル → ../ファイル名で記述（※2つ上の階層にあるファイル の場合は「../../ファイル名」）

■ ネットワーク
LAN(Local Area Network（ローカルエリアネットワーク）)
=>家庭内、会社内などの一定の限定されたエリアで接続できるネットワーク。

WAN（Wide Area Network（ワイドエリアネットワーク）)
=>遠く離れたエリアとつながったネットワークで、だれもが自由に接続できるネットワーク。
LANとLANをつないだ大きなネットワーク。ンターネットもWANのひとつで、世界中のコンピュータ同士がくもの巣のようにつながっている。

クライアント
=>ネットワークに接続してサービスを利用するコンピュータを指す。

サーバー
=>サービスを提供するコンピュータを指す。インターネットを介してユーザーと繋がっています。
webサーバー、メールサーバー、データベースサーバー、DNSサーバーなどがある。

■ 各種プロトコル
プロトコル
=>コンピューター同士の通信をする際の手順や規格
情報を送り出す端末の選定、データの形式、パケットの構成、エラーの対処などを取り決めた通信の約束事

HTTP★
=>「Hyper Text Transfer Protocol」の略。HTMLで書かれた文書などの情報をやりとりする時に使われる通信手順(プロトコル)を意味する。
ホームページ内の文字や画像などのデータを、サーバと通信相手（ホームページ閲覧者）との間で通信するための 通信規約（プロトコル）。

FTP
=>Webサイトを公開するためには、手元にある文章や画像データなどを、Webサーバーに転送(実質的には複製)しなければいけない。
FTPのPはその転送作業のを実施する決まり事を示している。
FTP自体が目的で完結するわけではなく、あくまで中継や輸送の手段。要所に位置して、通信全体をつなぐ仕組み。

SSL
=>「通信内容を秘匿する暗号機能」「通信相手の真正性」「通信データが改ざんされていないか検知する機能」の3つの機能を持った通信規約（プロトコル）

HTTPS
=>SSLを利用したhttp通信。
httpにセキュリティ機能を追加したもの。

SSH(Secure Shell)
=>ネットワークに接続された機器を遠隔操作し、管理するための手段。
SSHを利用して、本来の管理目的で対象のサーバーへ安全に接続し、操作する手段が使われている。
SSLはwebサイトへの安全に表示するためのものに対し、SSHはサーバーへの接続を目的としている。

ポート、ポート番号★
=>コンピュータが通信に使用するプログラムを識別するための番号
IPアドレスが住所「家」であれば、ポートは外に出る・外から入る「扉（ドア）」に該当。
インターネットサーバ側のポート（扉：出入口）は固定の番号となっており、常に扉が開いた状態。
パソコン側は、使用の都度ポートを開閉することで侵入リスクを軽減

HTTP、FTP、SSHの各ポート番号
=>HTTP-80, FTP(データ)-20, FTP(制御)-21, SSH-22

ファイアウォール★
=>企業などの内部ネットワークをインターネットを通して侵入してくる不正なアクセスから守るための“防火壁”。
送られてくるパケット（データのかたまり）の情報から接続を許可するか判断し、不正なアクセスであると判断した際には、管理者に通報できるよう設計されている。

TCP(Transmission Control Protocol)
=>IPと同様にインターネットにおいて標準的に利用されているプロトコル。
IPの上位プロトコルでトランスポート層で動作し、信頼性の高い通信を実現するために使用されるコル。

■ IPアドレス
IPアドレス★
=>インターネット上に接続された機器が持つナンバーのこと。
ネットワーク上で通信相手を間違わないようにするために使われる。
ネットワーク上の機器を識別するために割り当てられていて、インターネット上での住所のような役割をになっている。

グローバルIPアドレス
=>インターネットに接続する機器が使用できるIPアドレスで、インターネットなど公共回線でアクセスを行う時に使用する。

プライベートIPアドレス
=>組織内のネットワーク（プライベートネットワーク）でのみ使用できるIPアドレス。
オフィス内のネットワークや家庭用のネットワークなどで使用される。

■ ドメイン
ドメイン★
=>「インターネット上に存在するコンピューターやネットワークを識別するための名前」であり、インターネット上の住所である。
独自ドメインは、ユーザーが独自で名前を決めて自分の好きなように利用できるドメイン。
サブドメインは、「独自ドメイン」をさらに細かく分割して複数のユーザに割り振るためのドメイン。

DNS
=>人が使う言葉で書かれた住所 (ドメイン名) とネットワーク上にあるコンピュータ (WebやメールサーバーのIPアドレス) の間で、翻訳機としての役割がある。
利用者がPCのブラウザ上でWebサイトのドメイン名を入力して、世界中に無数にあるDNSサーバーが一瞬で連携して、web サイトを表示させる。

VPN
=>インターネット上に仮想の専用線を設定し、特定の人のみが利用できる専用ネットワーク。
接続したい拠点（支社）に専用のルーターを設置し、相互通信をおこなうことができる。
「トンネリング」「暗号化」「承認」を設定することで、セキュリティ上安全にデータのやり取りを行うことができる。

ブリッジ
=>複数のネットワークセグメントを結ぶ中継機器のうち、受信したデータのMACアドレスなどデータリンク層（リンク層、第2層、MAC層）の宛先情報を参照して中継の可否を判断する機能を持ったもの。
ネットワークにおける交通整理(データの行先を振り分けてくれる)をする機器。

プロキシサーバー★
=>企業の社内ネットワークなどからインターネットに接続する際に、出入り口で中継をしているサーバ。
内部と外部のネットワークの中継をする役割を持つサーバーで、情報の受け渡しを行なっている。
プロキシ上にログが残る。ウイルスチェックができる、匿名性の確保、負荷の分散・軽減ができると言ったメリットがある。

■ 電子メール
SMTP
=>電子メールを送信するために使用するアプリケーション層のプロトコル。
メールソフトから、メールサーバへ電子メールを送信する際にこのSMTPを使用する。ポート番号-25

POP
=>電子メールを受信するために使用するアプリケーション層プロトコル。
メーラでメールサーバから電子メールを受信する際に使用される。ポート番号-110
サーバにあるメールをパソコン等の端末にダウンロードして、端末上でメールを管理する仕組み。
1台のコンピュータしか使わない、または、メールを読むコンピュータを一台に決めている場合に向いている。

IMAP
=>サーバにあるメールをパソコン等の端末にはダウンロードせず、サーバ上でメールを管理する仕組みです。
複数のコンピュータでメールを管理したい場合やスマートフォンなどで外出先でもメールを見たい場合に向いている。

■ セッションとクッキー
セッション★
=>Webサイトにアクセスして行う一連の行動を示す。
あるWebサイトにアクセスして、そのサイトから出て行くかブラウザを閉じるまでが1セッションとなる(30分以内でのページ間の移動はカウントされない)。

クッキー★
=>ホームページを訪問したユーザーの情報を一時的に保存する仕組み、またはそのデータ。
ID、パスワード、メールアドレス、訪問回数などがユーザー情報として保存される。
サイトに再訪問したときにユーザーを特定し、情報を入力する手間が省けるが、端末を盗難された際に情報を悪用されやすい。

キャッシュ★
=>閲覧したWebページの情報を一時的に保存する機能。
2回目に同じWebページに訪問したときに表示するスピードが上がりより閲覧しやすくなる。
クッキーとキャッシュは、訴求できる広告をユーザーの属性や志向性別にターゲティングする行動ターゲティング広告に利用されたり、アクセス解析でユニークユーザーを計測するときに利用される。

■ DB（データベース）について
インデックス★
=>テーブルの情報を探す時に検索の対象としてよく使用するカラムの値だけを取り出して検索しやすいようにしておいたもの。
対象のカラムのデータを取り出し、高速に検索できるように手を加えて保存しておいたもの。
インデックスを作成することでテーブルとは別に検索用に最適化された状態で必要なデータだけがテーブルとは別に保存される。

■ テストについて
フロー
=>コンピュータプログラムを構成する命令や手続き、処理の流れなどのこと。
情報システム上での機器間やソフトウェア間のデータの移動や伝達、通信の分野での回線を通じて伝送される信号やデータの流れを「データフロー」という

■ チケット管理ツール
=>プロジェクト毎に発生する各種タスクを発行して、制作者に対して仕事を依頼するためのもの

タスク
=>ソフトウェア上でのタスクは、メインメモリ上に展開され実行状態にあるプログラムのことを指すもので、「プロセス」（process）とほぼ同義。

■ バージョン管理
Git★
=>ファイルのバージョン管理が簡単にできるツール。
コンピューター上でファイルの編集履歴を管理できるので、編集前のファイルを残したまま、新しく編集したファイルを保存することができる。

SVN
=>オープンソースの集中型バージョン管理システム。複数の開発者が共同で一つのソフトウェアを開発する際などに、ソースコードやドキュメントを管理するのに用いられる。

デグレ(デグレート)★
=>新しいバージョンのソフトウェアの品質が、以前より悪くなること。また、以前修正した不具合やバグが再発・復活すること。
ソフトウェアを更新したにもかかわらず、何らかの原因で以前は正常に動いていた機能にバクや不具合が生じて、品質が悪くなってしまうこと。

マージツール
=>複数のファイルやデータ、プログラムなどを、決められたルールに従って一つに統合することをマージといい、それを行うツール。
また、バージョン管理システムなどで管理している開発中のプログラムなどに、新たにコードを追加したり、修正を反映させたりする操作ツール。